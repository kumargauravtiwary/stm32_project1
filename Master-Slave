write C code for 
1)2 boards of stm32f103c8 
2)make one board as master and another as slave
3)send Hello world from master to slave 

To create a simple communication setup between two STM32F103C8 boards, one as the master and the other as the slave, and send "Hello, World!" from the master to the slave using UART (USART1), you can follow these steps. This example assumes that you are using the STM32CubeIDE and HAL (Hardware Abstraction Layer) library. Make sure you have configured the peripherals and clocks appropriately in STM32CubeIDE before proceeding.

Here's a basic code outline for both the master and slave:

Master (Board 1):

c
Copy code
#include "stm32f1xx_hal.h"
#include <string.h>

UART_HandleTypeDef huart1;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART1_UART_Init();

    char txData[] = "Hello, World!\r\n";

    while (1) {
        HAL_UART_Transmit(&huart1, (uint8_t*)txData, strlen(txData), HAL_MAX_DELAY);
        HAL_Delay(1000); // Send message every 1 second
    }
}

void SystemClock_Config(void) {
    // Configure the system clock as needed
    // This function should be generated by STM32CubeMX
}

static void MX_GPIO_Init(void) {
    // Configure GPIO pins if needed
}

static void MX_USART1_UART_Init(void) {
    huart1.Instance = USART1;
    huart1.Init.BaudRate = 115200;
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.Mode = UART_MODE_TX_RX;
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart1) != HAL_OK) {
        Error_Handler();
    }
}

void Error_Handler(void) {
    // Handle error if needed
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t* file, uint32_t line) {
    // Handle assertion error if needed
}
#endif
Slave (Board 2):

c
Copy code
#include "stm32f1xx_hal.h"

UART_HandleTypeDef huart1;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_USART1_UART_Init();

    char rxData[100];
    uint8_t rxIndex = 0;

    while (1) {
        if (HAL_UART_Receive(&huart1, (uint8_t*)&rxData[rxIndex], 1, HAL_MAX_DELAY) == HAL_OK) {
            if (rxData[rxIndex] == '\n' || rxIndex >= sizeof(rxData) - 1) {
                rxData[rxIndex + 1] = '\0'; // Null-terminate the string
                // Process received data (e.g., display it or perform an action)
                // For simplicity, we'll just print it back
                HAL_UART_Transmit(&huart1, (uint8_t*)rxData, strlen(rxData), HAL_MAX_DELAY);
                rxIndex = 0;
            } else {
                rxIndex++;
            }
        }
    }
}

void SystemClock_Config(void) {
    // Configure the system clock as needed
    // This function should be generated by STM32CubeMX
}

static void MX_GPIO_Init(void) {
    // Configure GPIO pins if needed
}

static void MX_USART1_UART_Init(void) {
    huart1.Instance = USART1;
    huart1.Init.BaudRate = 115200;
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
    huart1.Init.StopBits = UART_STOPBITS_1;
    huart1.Init.Parity = UART_PARITY_NONE;
    huart1.Init.Mode = UART_MODE_TX_RX;
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
    if (HAL_UART_Init(&huart1) != HAL_OK) {
        Error_Handler();
    }
}

void Error_Handler(void) {
    // Handle error if needed
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t* file, uint32_t line) {
    // Handle assertion error if needed
}
#endif
Make sure to set up the UART communication parameters (baud rate, word length, stop bits, etc.) correctly in STM32CubeMX for both boards to match.

Connect the UART Tx pin of the master board (Board 1) to the UART Rx pin of the slave board (Board 2), and vice versa. Also, connect the ground (GND) pins of both boards together.

After flashing and running this code on both boards, they should establish communication, and "Hello, World!" will be sent from the master to the slave board, which will then echo the message back to the master.
