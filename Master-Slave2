To establish SPI communication between two STM32F103C8 boards, with one acting as the master and the other as the slave, and send "Hello, World!" from the master to the slave, you can use the STM32CubeIDE and HAL library. Ensure that you have configured the SPI peripherals and pins correctly in STM32CubeIDE.

Here's a basic code outline for both the master and slave:

Master (Board 1):

#include "stm32f1xx_hal.h"
#include <string.h>

SPI_HandleTypeDef hspi1;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_SPI1_Init();

    char txData[] = "Hello, World!\r\n";

    while (1) {
        HAL_SPI_Transmit(&hspi1, (uint8_t*)txData, strlen(txData), HAL_MAX_DELAY);
        HAL_Delay(1000); // Send message every 1 second
    }
}

void SystemClock_Config(void) {
    // Configure the system clock as needed
    // This function should be generated by STM32CubeMX
}

static void MX_GPIO_Init(void) {
    // Configure GPIO pins if needed
}

static void MX_SPI1_Init(void) {
    hspi1.Instance = SPI1;
    hspi1.Init.Mode = SPI_MODE_MASTER;
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    hspi1.Init.NSS = SPI_NSS_SOFT;
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hspi1.Init.CRCPolynomial = 10;

    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
        Error_Handler();
    }
}

void Error_Handler(void) {
    // Handle error if needed
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t* file, uint32_t line) {
    // Handle assertion error if needed
}
#endif
Slave (Board 2):

c
Copy code
#include "stm32f1xx_hal.h"

SPI_HandleTypeDef hspi1;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_SPI1_Init();

    char rxData[100];
    uint8_t rxIndex = 0;

    while (1) {
        if (HAL_SPI_Receive(&hspi1, (uint8_t*)&rxData[rxIndex], 1, HAL_MAX_DELAY) == HAL_OK) {
            // Process received data (e.g., display it or perform an action)
            // For simplicity, we'll just print it back
            rxIndex++;
            if (rxData[rxIndex - 1] == '\n' || rxIndex >= sizeof(rxData) - 1) {
                rxData[rxIndex] = '\0'; // Null-terminate the string
                HAL_SPI_Transmit(&hspi1, (uint8_t*)rxData, strlen(rxData), HAL_MAX_DELAY);
                rxIndex = 0;
            }
        }
    }
}

void SystemClock_Config(void) {
    // Configure the system clock as needed
    // This function should be generated by STM32CubeMX
}

static void MX_GPIO_Init(void) {
    // Configure GPIO pins if needed
}

static void MX_SPI1_Init(void) {
    hspi1.Instance = SPI1;
    hspi1.Init.Mode = SPI_MODE_SLAVE;
    hspi1.Init.Direction = SPI_DIRECTION_2LINES;
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
    hspi1.Init.NSS = SPI_NSS_SOFT;
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
    hspi1.Init.CRCPolynomial = 10;

    if (HAL_SPI_Init(&hspi1) != HAL_OK) {
        Error_Handler();
    }
}

void Error_Handler(void) {
    // Handle error if needed
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t* file, uint32_t line) {
    // Handle assertion error if needed
}
#endif
Make sure to set up the SPI parameters (e.g., baud rate, polarity, phase, data size) correctly in STM32CubeMX for both boards to match.

Connect the SPI SCK, MISO, and MOSI pins between the master and slave boards. Additionally, connect the SPI NSS (Slave Select) pins if needed (configured as GPIOs here).

After flashing and running this code on both boards, they should establish SPI communication, and "Hello, World!" will be sent from the master to the slave board, which will then echo the message back to the master.
